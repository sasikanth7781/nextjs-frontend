https://firm-rare-mule.ngrok-free.app/api/customer/login/
https://docs.google.com/document/d/1eeU5zjNzGU084O7nDShoQxfjHmqaoyP6xBx_wSRWFuY/edit?tab=t.0
https://intersoft123.sharepoint.com/:x:/r/sites/DocuIntel/_layouts/15/Doc2.aspx?action=edit&sourcedoc=%7B6f0644ed-3313-474e-bfb3-e1d1c216cb73%7D&wdOrigin=TEAMS-MAGLEV.teamsSdk_ns.rwc&wdExp=TEAMS-TREATMENT&wdhostclicktime=1757937218969&web=1

//For Registration Page
Request:
{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "password": "Password@123",
  "confirmPassword": "Password@123",
  "company": "Acme Corp",
  "role": "User"
}
Response:
{
  "success": true,
  "message": "Registration successful. Please check your email for a login link."
}

(or)
{
  "success": false,
  "message": "User with this email already exists."
}

//For OTP Verification page.
Request:
{
  "email": "user@example.com",
  "otp": "123456"
}
Response:
{
  "success": true,
  "message": "OTP verified successfully. You can now log in."
}
(or)
{
  "success": false,
  "message": "Invalid OTP. Please try again."
}
(or)
{
  "success": false,
  "message": "OTP has expired. Please request a new one."
}
//After successful verification we will redict user to login page.

const onSuccess = (res: any) => {
    SetIsDialog(true);
  };

  const onError = (err: any) => {
    setLoading(false);
    if (err?.response?.data === "Email already exists.") {
      enqueueSnackbar("Email already exists.", { variant: "error" });
    } else {
      enqueueSnackbar("Error while creating user.Please try again.", {
        variant: "error",
      });
    }
  };

 var key = CryptoJS.enc.Utf8.parse(process.env.NEXT_PUBLIC_LOGIN_KEY);
        var iv = CryptoJS.enc.Utf8.parse(process.env.NEXT_PUBLIC_LOGIN_KEY);

        let encryptedEmail = CryptoJS.AES.encrypt(
          CryptoJS.enc.Utf8.parse(data?.email),
          key,
          {
            keySize: 128 / 8,
            iv: iv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7,
          }
        );
NEXT_PUBLIC_LOGIN_KEY="Secret_7645@!@$#"
import { SnackbarProvider } from "src/components/snackbar";
import { useSnackbar } from "src/components/snackbar";
 if (err?.response?.data === "Email already exists.") {
            enqueueSnackbar(err?.response?.data, {
              variant: "error",
            });
          } else {
            enqueueSnackbar("Error while updating coach status.", {
              variant: "error",
            });
          }


  useEffect(() => {
    localStorage.clear();
    secureLocalStorage.clear();
    localStorage.removeItem("primaryFacility");
    secureLocalStorage.removeItem(AppConstant.TOKEN);
    setUserStore({});
  }, []);


const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const passwordRules = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W_]).{8,}$/;
  const LoginSchema = Yup.object().shape({
    email: Yup.string().matches(emailRegex,AppConstant.VALID_EMAIL_ADDRESS).required(AppConstant.EMAIL_IS_REQUIRED),
    password: Yup.string().required(AppConstant.PASSWORD_REQUIRED),
  });

email body:- 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>SoftDoc AI OTP Verification</title>
    <style>
      body {
        font-family: 'Segoe UI', Roboto, sans-serif;
        background-color: #f9fafb;
        margin: 0;
        padding: 0;
      }
      .container {
        max-width: 600px;
        margin: 40px auto;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        padding: 40px;
      }
      .header {
        text-align: center;
        font-size: 24px;
        font-weight: 700;
        background: linear-gradient(90deg, #4A90E2, #9B6EF3);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 20px;
      }
      .message {
        font-size: 16px;
        color: #333333;
        margin-bottom: 30px;
        line-height: 1.6;
      }
      .otp-box {
        font-size: 32px;
        font-weight: 600;
        color: #4A90E2;
        text-align: center;
        letter-spacing: 4px;
        margin-bottom: 30px;
      }
      .footer {
        font-size: 14px;
        color: #888888;
        text-align: center;
        margin-top: 40px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">SoftDoc AI</div>
      <div class="message">
        Thank you for registering with SoftDoc AI.<br />
        To verify your account, please enter the following 6-digit code on the verification page:
      </div>
      <div class="otp-box">{{ otp }}</div>
      <div class="message">
        This code is valid for the next 10 minutes. If you didn’t request this, please ignore this email.
      </div>
      <div class="footer">
        &copy; {{ current_year }} SoftDoc AI. All rights reserved.
      </div>
    </div>
  </body>
</html>
email subject:- Your SoftDoc AI Verification Code



{"web":{"client_id":"225750536078-d7p8gg18qd5c9ltpnee70o5c0v6t9n8h.apps.googleusercontent.com","project_id":"medica-472410","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_…


https://firm-rare-mule.ngrok-free.app/api/accounts/google/login/callback/%22
// app/auth/callback/page.tsx
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { saveAuthData } from "@/lib/auth";

export default function CallbackPage() {
  const router = useRouter();

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code"); // from Google via Django

    if (code) {
      // Call Django backend to exchange code -> JWT + user info
      fetch("https://your-django-api.com/api/google/callback/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          code,
          redirect_uri: "https://your-frontend.com/auth/callback",
        }),
      })
        .then((res) => res.json())
        .then((data) => {
          // Save tokens + Google profile in secure storage
          saveAuthData(data);

          // Redirect to home page
          router.push("/home");
        })
        .catch((err) => console.error("Login error:", err));
    }
  }, [router]);

  return <p>Logging in...</p>;
}
// app/login/page.tsx
"use client";
import { Button, Container, Typography } from "@mui/material";

export default function LoginPage() {
  const onGoogleLogin = () => {
    // Redirect user to Django backend OAuth entry
    window.location.href =
      "https://your-django-api.com/accounts/google/login/?redirect_uri=https://your-frontend.com/auth/callback";
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 10, textAlign: "center" }}>
      <Typography variant="h4">Login</Typography>
      <Button variant="contained" color="primary" onClick={onGoogleLogin}>
        Login with Google
      </Button>
    </Container>
  );
}



